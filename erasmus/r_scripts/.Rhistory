theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot2
# arrange plots
ggarrange(plot, plot2,
ncol = 1, nrow = 2)
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("comp_no_corr_no_epp_per_year_to_era_arranged_linecharts.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_era_arranged_linecharts.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_era_arranged_linecharts.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_era_arranged_linecharts.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(reshape2)
require(ggplot2)
require(ggpubr)
library(readr)
library(reshape2)
library(ggplot2)
library(ggpubr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_corr_per_year/comp_no_corr_no_epp_per_year_from_era.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 53))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1536)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# create linechart for number of correspondents
plot <- ggplot(data=data3, aes(x= Year, y=Number.of.correspondents.receiving.letters.from.Erasmus.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of correspondents") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,90,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot
# create linechart for number of letters
plot2 <- ggplot(data=data3, aes(x= Year, y=Number.of.letters.sent.from.Erasmus.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,150,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot2
# arrange plots
ggarrange(plot, plot2,
ncol = 1, nrow = 2)
require(readr)
require(reshape2)
require(ggplot2)
require(ggpubr)
library(readr)
library(reshape2)
library(ggplot2)
library(ggpubr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_corr_per_year/comp_no_corr_no_epp_per_year_from_era.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 53))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1536)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# create linechart for number of correspondents
plot <- ggplot(data=data3, aes(x= Year, y=Number.of.correspondents.receiving.letters.from.Erasmus.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of correspondents") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,90,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot
# create linechart for number of letters
plot2 <- ggplot(data=data3, aes(x= Year, y=Number.of.letters.sent.from.Erasmus.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,150,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot2
# arrange plots
ggarrange(plot, plot2,
ncol = 1, nrow = 2)
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("comp_no_corr_no_epp_per_year_from_era_arranged_linecharts.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_from_era_arranged_linecharts.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_from_era_arranged_linecharts.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_from_era_arranged_linecharts.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(reshape2)
require(ggplot2)
library(readr)
library(reshape2)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_year/comp_no_epp_per_year_inferred_noninferred.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 53))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1536)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# apply melt for wide to long
data_long <- melt(data3, id.vars= c("Year"))
# create linechart
plot <- ggplot(data=data_long, aes(x= Year, y=value, colour=variable)) +
geom_point(shape=1, fill="white", stroke=1.25) +
geom_point(shape=1) + labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,160,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom") +
theme(legend.title=element_blank()) +
scale_color_grey(labels = c("Number of letters with inferred send date", "Number of letters with non-inferred send date"))
plot
require(readr)
require(reshape2)
require(ggplot2)
library(readr)
library(reshape2)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_year/comp_no_epp_per_year_inferred_noninferred.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 53))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1536)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# apply melt for wide to long
data_long <- melt(data3, id.vars= c("Year"))
# create linechart
plot <- ggplot(data=data_long, aes(x= Year, y=value, colour=variable)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,160,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom") +
theme(legend.title=element_blank()) +
scale_color_grey(labels = c("Number of letters with inferred send date", "Number of letters with non-inferred send date"))
plot
require(readr)
require(reshape2)
require(ggplot2)
library(readr)
library(reshape2)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_year/comp_no_epp_per_year_inferred_noninferred.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 53))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1536)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# apply melt for wide to long
data_long <- melt(data3, id.vars= c("Year"))
# create linechart
plot <- ggplot(data=data_long, aes(x= Year, y=value, colour=variable)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1536)) +
scale_y_continuous(breaks = seq(0,160,10)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom") +
theme(legend.title=element_blank()) +
scale_color_grey(labels = c("Number of letters with inferred send date", "Number of letters with non-inferred send date"))
plot
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("comp_no_epp_per_year_inferred_noninferred_linechart.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_epp_per_year_inferred_noninferred_linechart.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_epp_per_year_inferred_noninferred_linechart.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_epp_per_year_inferred_noninferred_linechart.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(ggplot2)
require(ggrepel)
library(readr)
library(ggplot2)
library(ggrepel)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/avg_no_epp_per_corr_loc_written_by_era_to.csv", fileEncoding="UTF-8")
# create boxplot
plot <- ggplot(data, aes(x= ' ', y = Average.Number.of.letters.per.correspondent)) +
geom_boxplot(outlier.size=2, notch = FALSE) +
geom_text_repel(label=ifelse(data$Average.Number.of.letters.per.correspondent>5,as.character(data$Location.Name),'')) +
theme_bw() +
theme(axis.title.x=element_blank()) +
labs(y = "Average number of letters sent from Erasmus to this location per correspondent")
plot
require(readr)
require(ggplot2)
require(tidyr)
library(readr)
library(ggplot2)
library(tidyr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- gather(data, id.vars= c("LocationName","Latitude","Longitude"))
str(data_long)
clear
require(readr)
require(ggplot2)
require(reshape)
library(readr)
library(ggplot2)
library(reshape)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- melt(data, id.vars= c("LocationName","Latitude","Longitude"))
# create poinplot
plot <- ggplot(data_long, aes(x = reorder(LocationName, -value), y = value, colour = variable)) +
geom_point() +
labs(x="Locations",y="Number of letters") +
theme_bw() +
theme(legend.position="bottom") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
require(readr)
require(ggplot2)
require(reshape)
library(readr)
library(ggplot2)
library(reshape2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- melt(data, id.vars= c("LocationName","Latitude","Longitude"))
# create poinplot
plot <- ggplot(data_long, aes(x = reorder(LocationName, -value), y = value, colour = variable)) +
geom_point() +
labs(x="Locations",y="Number of letters") +
theme_bw() +
theme(legend.position="bottom") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
require(readr)
require(ggplot2)
require(reshape2)
library(readr)
library(ggplot2)
library(reshape2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- melt(data, id.vars= c("LocationName","Latitude","Longitude"))
str(data_long)
require(readr)
require(ggplot2)
require(tidyr)
library(readr)
library(ggplot2)
library(tidyr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- gather(data, id.vars= c("LocationName","Latitude","Longitude"))
str(data_long)
require(readr)
require(ggplot2)
require(tidyr)
library(readr)
library(ggplot2)
library(tidyr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- gather(data, LocationName, Latitude, Longitude)
str(data_long)
require(readr)
require(ggplot2)
require(tidyr)
library(readr)
library(ggplot2)
library(tidyr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- gather(data, LocationName, Latitude, Longitude)
# create poinplot
plot <- ggplot(data_long, aes(x = reorder(LocationName, -value), y = value, colour = variable)) +
geom_point() +
labs(x="Locations",y="Number of letters") +
theme_bw() +
theme(legend.position="bottom") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
require(readr)
require(ggplot2)
require(reshape2)
library(readr)
library(ggplot2)
library(reshape2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_sent_to_era_from_and_by_era_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# apply melt for wide to long
data_long <- melt(data, id.vars= c("LocationName","Latitude","Longitude"))
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (density) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="density", timeunit = "years")
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# subset to remove 0000-00-00 dates
subset(data, Beginning.of.correspondence.with.Erasmus!=0000-00-00)
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (density) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="density", timeunit = "years")
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# subset to remove 0000-00-00 dates
data <- subset(data, Beginning.of.correspondence.with.Erasmus!=0000-00-00)
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (density) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="density", timeunit = "years")
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (histogram) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="histogram", timeunit = "years")
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# subset to remove 0000-00-00 dates
data <- subset(data, Beginning.of.correspondence.with.Erasmus!=0000-00-00)
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (histogram) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="histogram", timeunit = "years")
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/duration_of_correspodence_all_corr.csv", fileEncoding="UTF-8", colClasses=c("Beginning.of.correspondence.with.Erasmus"="Date","End.of.the.correspondence.with.Erasmus"="Date"))
# subset to remove 0000-00-00 dates
data <- subset(data, Beginning.of.correspondence.with.Erasmus!=0000-00-00)
# calculate duration of correspondence
data$duration <- durCalc(data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", timeunit="years")
#durPlot (scatterplot) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Beginning.of.correspondence.with.Erasmus", end="End.of.the.correspondence.with.Erasmus", plot_type="scatter", timeunit = "years", point_size = 1)
require(readr)
require(timelineS)
library(readr)
library(timelineS)
# set working directory
getwd()
setwd("../query_results/")
# read data and define data type for date columns
data<-read.csv("duration_of_correspondence/dates_begin_end_reciproc_correspondence.csv", fileEncoding="UTF-8", colClasses=c("Start.of.correspondence"="Date","End.of.correspondence"="Date"))
# calculate duration of correspondence
data$duration <- durCalc(data, start="Start.of.correspondence", end="End.of.correspondence", timeunit="years")
#durPlot (density) for duration of correspondence in correlation to the beginning of the correspondence
durPlot(df=data, start="Start.of.correspondence", end="End.of.correspondence", plot_type="density", timeunit = "years")
install.packages("lintr")
lintr::lint("duration_of_correspodence_all_corr_boxplot_facet_grid_year.R")
lintr::lint("duration_of_correspondence/duration_of_correspodence_all_corr_boxplot_facet_grid_year.R")
library("lintr", lib.loc="~/R/R-3.4.2/library")
lint("duration_of_correspondence/duration_of_correspodence_all_corr_boxplot_facet_grid_year.R")
lint("duration_of_correspodence_all_corr_boxplot_facet_grid_year.R")
shinyjs:::colourPickerAddin()
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_point(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
theme_bw() +
theme(axis.title.x=element_text(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
View(data)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_point(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
theme_bw() +
theme(axis.title.x=element_text(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
