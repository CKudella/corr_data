l <- layout_with_spring(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l*2, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
cut.off <- mean(links$weight)
net2 <- delete.edges(net2, E(net2)[weight<cut.off])
l <- layout.fruchterman.reingold(net2, repulserad=vcount(net)^2.1)
plot(net2, layout=l)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight, repulserad=vcount(net)^2.1)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight, repulserad=vcount(net)^50.1)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight, repulserad=vcount(net)^500)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=1, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
as_data_frame(net, what="edges")
as_data_frame(net2, what="edges")
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
write.csv(file = "edgestest.csv") <- as_data_frame(net, what="edges")
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net, what="edges")
edges_for_output
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net2, what="edges")
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net2, what="edges")
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net2, what="edges")
write.csv(file = "edgestest.csv") <- edges_for_output
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net2, what="edges")
write.csv(edges_for_output, file = "edgestest.csv")
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
# write edges file
edges_for_output <- as_data_frame(net2, what="edges")
write.csv(edges_for_output, file = "edgestest.csv", fileEncoding="UTF-8")
as_data_frame(net2, what="vertices")
require(readr)
require(ggplot2)
library(readr)
library(tidyverse)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("merge_scripts/intersection_merge/intersection_merge_era_and_pirck_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
require(readr)
require(ggplot2)
library(readr)
library(tidyverse)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("merge_scripts/intersection_merge/intersection_merge_era_and_pirck_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# cut uncessary label parts from Label column
data$Label <- gsub("\\b(\\W+COE+.*)", "", data$Label)
data$Label <- gsub("^(\\W+E)", "E", data$Label)
# add colour column for mutual correspondents to be used with the "give colour to nodes" plugin for gephi
data$colour <- "#fdb863"
#assign specific colour for erasmus
data$colour <- ifelse(data$Id == "erasmus_desiderius_viaf_95982394", as.character("#e66101"), data$colour)
#assign specific colour for budé
data$colour <- ifelse(data$Id == "pirckheimer_willibald_viaf_27173507", as.character("#5e3c99"), data$colour)
# write file
write.csv(data, file = "merge_scripts/intersection_merge/parsed_intersection_merge_era_and_pirck_correspondents.csv", fileEncoding="UTF-8", row.names=FALSE)
require(readr)
require(ggplot2)
library(readr)
library(tidyverse)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data for all correspondents
data<-read.csv("merge_scripts/complete_merge/complete_merge_pirck_and_era_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# read data for mutual correspondents
mutcorr<-read.csv("intersection_overview/id_and_names_of_mut_corr_era_pirck.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
require(readr)
require(ggplot2)
library(readr)
library(tidyverse)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data for all correspondents
data<-read.csv("merge_scripts/complete_merge/complete_merge_pirck_and_era_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# read data for mutual correspondents
mutcorr<-read.csv("intersection_overview/id_and_names_of_mut_corr_era_pirck.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# cut uncessary label parts from Label column
data$Label <- gsub("\\b(\\W+COE+.*)", "", data$Label)
data$Label <- gsub("^(\\W+E)", "E", data$Label)
# add colour for all correspondents
data$colour <- "#525252"
# add colour column for mutual correspondents to be used with the "give colour to nodes" plugin for gephi
data$colour <- ifelse(data$Id %in% mutcorr$correspondents_id, as.character("#fdb863"), data$colour)
#assign specific colour for erasmus
data$colour <- ifelse(data$Id == "erasmus_desiderius_viaf_95982394", as.character("#e66101"), data$colour)
#assign specific colour for pirckheimer
data$colour <- ifelse(data$Id == "pirckheimer_willibald_viaf_27173507", as.character("#5e3c99"), data$colour)
View(data)
require(readr)
require(ggplot2)
library(readr)
library(tidyverse)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data for all correspondents
data<-read.csv("merge_scripts/complete_merge/complete_merge_pirck_and_era_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# read data for mutual correspondents
mutcorr<-read.csv("intersection_overview/id_and_names_of_mut_corr_era_pirck.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# cut uncessary label parts from Label column
data$Label <- gsub("\\b(\\W+COE+.*)", "", data$Label)
data$Label <- gsub("^(\\W+E)", "E", data$Label)
# add colour for all correspondents
data$colour <- "#525252"
# add colour column for mutual correspondents to be used with the "give colour to nodes" plugin for gephi
data$colour <- ifelse(data$Id %in% mutcorr$correspondents_id, as.character("#fdb863"), data$colour)
#assign specific colour for erasmus
data$colour <- ifelse(data$Id == "erasmus_desiderius_viaf_95982394", as.character("#e66101"), data$colour)
#assign specific colour for pirckheimer
data$colour <- ifelse(data$Id == "pirckheimer_willibald_viaf_27173507", as.character("#5e3c99"), data$colour)
# write file
write.csv(data, file = "merge_scripts/complete_merge/parsed_complete_merge_pirck_and_era_correspondents.csv", fileEncoding="UTF-8", row.names=FALSE)
