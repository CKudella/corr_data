theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot
# create linechart for number of letters
plot2 <- ggplot(data=data3, aes(x= Year, y=Number.of.letters.sent.to.Budé.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1540)) +
scale_y_continuous(breaks = seq(0,10,1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot2
# arrange plots
ggarrange(plot, plot2,
ncol = 1, nrow = 2)
require(readr)
require(reshape2)
require(ggplot2)
require(ggpubr)
library(readr)
library(reshape2)
library(ggplot2)
library(ggpubr)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_corr_per_year/comp_no_corr_no_epp_per_year_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1536
data2 <- data.frame(matrix(ncol = 1, nrow = 57))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1540)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# create linechart for number of correspondents
plot <- ggplot(data=data3, aes(x= Year, y=Number.of.correspondents.writing.letters.to.Budé.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of correspondents") +
scale_x_continuous(breaks = c(1484:1540)) +
scale_y_continuous(breaks = seq(0,5,1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot
# create linechart for number of letters
plot2 <- ggplot(data=data3, aes(x= Year, y=Number.of.letters.sent.to.Budé.this.year)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of letters") +
scale_x_continuous(breaks = c(1484:1540)) +
scale_y_continuous(breaks = seq(0,10,1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom")
plot2
# arrange plots
ggarrange(plot, plot2,
ncol = 1, nrow = 2)
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("comp_no_corr_no_epp_per_year_to_budé_arranged_linecharts.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_budé_arranged_linecharts.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_budé_arranged_linecharts.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_no_epp_per_year_to_budé_arranged_linecharts.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(reshape2)
require(ggplot2)
library(readr)
library(reshape2)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_corr_per_year/comp_no_corr_per_year_to_from_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1540
data2 <- data.frame(matrix(ncol = 1, nrow = 57))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1540)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# apply melt for wide to long
data_long <- melt(data3, id.vars= c("Year"))
# create linechart
plot <- ggplot(data=data_long, aes(x= Year, y=value, colour=variable)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of correspondents") +
scale_x_continuous(breaks = c(1484:1540)) +
scale_y_continuous(breaks = seq(0,30,5)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom") +
theme(legend.title=element_blank()) +
scale_color_grey(labels = c("Number of correspondents Budé writes to", "Number of correspondents writing to Budé"))
plot
require(readr)
require(reshape2)
require(ggplot2)
library(readr)
library(reshape2)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_corr_per_year/comp_no_corr_per_year_to_from_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create data frame for years 1484-1540
data2 <- data.frame(matrix(ncol = 1, nrow = 57))
x <- c("Year")
colnames(data2) <- x
data2$Year <- c(1484:1540)
# merge dataframes
data3 <- merge(x = data2, y = data, by = "Year", all.x = TRUE)
# apply melt for wide to long
data_long <- melt(data3, id.vars= c("Year"))
# create linechart
plot <- ggplot(data=data_long, aes(x= Year, y=value, colour=variable)) +
geom_line(stat = "identity", size=0.9) +
geom_point(shape=1, fill="white", stroke=1.25) +
labs(x="Year",y="Number of correspondents") +
scale_x_continuous(breaks = c(1484:1540)) +
scale_y_continuous(breaks = seq(0,30,5)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35)) +
theme(legend.position="bottom") +
theme(legend.title=element_blank()) +
scale_color_grey(labels = c("Number of correspondents Budé writes to", "Number of correspondents writing to Budé"))
plot
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("comp_no_corr_per_year_to_from_budé_linechart.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_per_year_to_from_budé_linechart.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_per_year_to_from_budé_linechart.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("comp_no_corr_per_year_to_from_budé_linechart.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(ggplot2)
require(ggrepel)
library(readr)
library(ggplot2)
library(ggrepel)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_written_by_budé_at.csv", fileEncoding="UTF-8")
# create boxplot
plot <- ggplot(data, aes(x= ' ', y = Number.of.letters.sent.from.this.location.from.Budé)) +
geom_boxplot(outlier.size=2, notch = FALSE, show.legend = TRUE) +
geom_text_repel(label=ifelse(data$Number.of.letters.sent.from.this.location.from.Budé>8.5,as.character(data$Location.Name),'')) +
theme_bw() +
theme(axis.title.x=element_blank()) +
labs(y = "Number of letters sent from this location by Budé")
plot
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_point(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
theme_bw() +
theme(axis.title.x=element_text(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_point(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
theme_bw() +
theme(axis.title.x=element_text(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("no_epp_per_loc_sent_to_budé_pointplot.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_pointplot.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_pointplot.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_pointplot.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_bar(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
theme_bw() +
theme(axis.title.x=element_text(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
plot
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_bar(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
geom_text(aes(label=Number.of.letters.sent.from.this.location.to.Budé), vjust=-0.5, color='black') +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35))
plot
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_bar(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
geom_text(aes(label=Number.of.letters.sent.from.this.location.to.Budé), vjust=-0.5, color='black') +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35))
plot
# change working directory
getwd()
setwd("../r_plots/")
# save plot in multiple formats
ggsave("no_epp_per_loc_sent_to_budé_barchart.pdf", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_barchart.png", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_barchart.eps", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
ggsave("no_epp_per_loc_sent_to_budé_barchart.svg", plot = last_plot(), scale = 1, width = 11.7, height = 8.3, units = "in", dpi = 600, limitsize = TRUE)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_written_by_budé_at.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create barchart
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.from.Budé), y=Number.of.letters.sent.from.this.location.from.Budé, label=Location.Name)) +
geom_bar(stat = "identity") +
labs(x="Locations",y="Number of letters sent from this location by Budé") +
geom_text(aes(label=Number.of.letters.sent.from.this.location.from.Budé), vjust=-0.5, color='black') +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35))
plot
quantile(data$Number.of.letters.sent.from.this.location.from.Budé)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_to_budé.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create pointplot
plot <- ggplot(data=data, aes(x= reorder(Location.Name, -Number.of.letters.sent.from.this.location.to.Budé), y=Number.of.letters.sent.from.this.location.to.Budé, label=Location.Name)) +
geom_bar(stat = "identity") +
scale_y_continuous(trans = 'sqrt') +
labs(x="Locations",y="Number of letters sent from this location to Budé") +
geom_text(aes(label=Number.of.letters.sent.from.this.location.to.Budé), vjust=-0.5, color='black') +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35))
plot
qunatile(data$Number.of.letters.sent.from.this.location.to.Budé)
quantile(data$Number.of.letters.sent.from.this.location.to.Budé)
require(readr)
require(igraph)
require(rgexf)
library(readr)
library(igraph)
library(rgexf)
# set working directory
getwd()
setwd("../query_results/")
# read node and edges into dataframe with the name expected by igraph
nodes <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_nodes_locations_for_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
links <- read.csv("create_geolayout_files_for_gephi_mut_corr_era_pirck/nodes_edges_for_epp_sent_by_era_mut_corr_era_pirck/create_edges_epp_sent_by_era_mut_corr_era_pirck.csv", fileEncoding="UTF-8")
#assign edge weight
links$weight <- 1
# create graph
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
# simplify
net2 <- simplify(net, remove.multiple = TRUE, edge.attr.comb=list(weight="sum","ignore"))
# layout with FR
l <- layout_with_fr(net2, weights=E(net2)$weight)*2.5
# plot graph
plot(net2, layout=l*5, vertex.size=3, vertex.label=V(net2)$locations_name_modern, vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85", edge.arrow.size=.2, edge.width=E(net2)$weight)
require(readr)
require(lubridate)
require(ndtv)
library(readr)
library(lubridate)
library(ndtv)
# set working directory
getwd()
setwd("../query_results/")
# read data for mutual correspondents
mutcorr<-read.csv("merge_scripts/intersection_merge/intersection_merge_era_and_budé_correspondents.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# read data for letters exchanged between erasmus, budé, and their mutual correspondents
mutepp<-read.csv("merge_scripts/intersection_merge/intersection_merge_era_and_budé_letters_corr_as_nodes.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# cut uncessary label parts from Label column
mutcorr$Label <- gsub("\\b(\\W+COE+.*)", "", mutcorr$Label)
mutcorr$Label <- gsub("^(\\W+E)", "E", mutcorr$Label)
# add colour column for mutual correspondents to be used with the "give colour to nodes" plugin for gephi
mutcorr$colour <- "#fdb863"
#assign specific colour for erasmus
mutcorr$colour <- ifelse(mutcorr$Id == "erasmus_desiderius_viaf_95982394", as.character("#e66101"), mutcorr$colour)
#assign specific colour for budé
mutcorr$colour <- ifelse(mutcorr$Id == "budé_guillaume_viaf_105878228", as.character("#5e3c99"), mutcorr$colour)
# assign colours to edges according to the source
mutepp$colour <- mutcorr$colour[match(mutepp$Source,mutcorr$Id)]
# set send_date_computable1 asDate
mutepp$send_date_computable1 <- as.Date(mutepp$send_date_computable1, format="%Y-%m-%d")
# extract start year as onset
mutepp$onset <- year(mutepp$send_date_computable1)
# set send_date_computable2 asDate
mutepp$send_date_computable2 <- as.Date(mutepp$send_date_computable2, format="%Y-%m-%d")
# extract end year as terminus
mutepp$terminus <- year(mutepp$send_date_computable2)
# replace the string with a numeric id and convert to numeric
mutcorr$clearId <- mutcorr$Id
mutcorr$Id <- as.factor(mutcorr$Id)
levels(mutcorr$Id) <- 1:length(levels(mutcorr$Id))
mutcorr$Id <- as.numeric(mutcorr$Id)
# rename source column as tail
colnames(mutepp)[colnames(mutepp) == 'Source'] <- 'tail'
# replace the string with a numeric id and convert to numeric
mutepp$tail <- mutcorr$Id[match(mutepp$tail,mutcorr$clearId)]
mutepp$tail <- as.numeric(mutepp$tail)
# rename target column as head
colnames(mutepp)[colnames(mutepp) == 'Target'] <- 'head'
# replace the string with a numeric id and and convert to numeric
mutepp$head <- mutcorr$Id[match(mutepp$head,mutcorr$clearId)]
mutepp$head <- as.numeric(mutepp$head)
# Add a sequential id column to the mutepp dataframe
mutepp$edge.id <- seq.int(nrow(mutepp))
# remove edges with NA values
mutepp <- subset(mutepp, !is.na(onset))
# initialze network
network <- network.initialize(n = 28)
# copy label column to vertices
set.vertex.attribute(network,"vertex.names",as.vector(mutcorr$Label))
# copy colour column to vertices
set.vertex.attribute(network,"vertex.col",as.vector(mutcorr$colour))
# add edges
add.edges.active(network, tail=mutepp$tail, head=mutepp$head, onset=mutepp$onset, terminus=mutepp$terminus, col=mutepp$colour)
# copy colour column to edges
set.edge.attribute(network,"edge.col",as.vector(mutepp$colour))
# copy label column to edges
set.edge.attribute(network,"edge.label",as.vector(mutepp$Label))
# define time intervals for animation
slice.par <- list(start = 1499, end = 1540, interval = 1,
aggregate.dur = 0, rule = "any")
# compute animation
compute.animation(network, slice.par = slice.par)
# plot timeslice
png('filmstrip_mut_corr_era_budé.png', width=7016, height=4961)
filmstrip(network, displaylabels=FALSE, slice.par = slice.par)
par(mfrow=c(5,10))
dev.off()
require(readr)
require(ggplot2)
require(ggrepel)
library(readr)
library(ggplot2)
library(ggrepel)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/avg_no_epp_per_loc_year_written_by_budé_to.csv", fileEncoding="UTF-8")
# create boxplot
plot <- ggplot(data, aes(x= ' ', y = Average.number.of.letters.written.by.Budé.to.this.location.per.year)) +
geom_boxplot(outlier.size=2, notch = FALSE) +
geom_text_repel(label=ifelse(data$Average.number.of.letters.written.by.Budé.to.this.location.per.year>1.8325,as.character(data$Location.Name),'')) +
theme_bw() +
theme(axis.title.x=element_blank()) +
labs(y = "Average number of letters sent from Budé to this location per year")
plot
View(data)
head(data)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_written_by_budé_at_and_sent_by_budé_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create scatterplot
plot <- ggplot(data=data, aes(x=NoLettersWrittenByBudéTO, y=NoLettersWrittenBYBudéAT, label=LocationName)) +
geom_point(stat = "identity") +
geom_smooth(method = lm) +
labs(x="Number of letters written by Budé to this location",y="Number of letters written by Budé at this location") +
theme_bw()
plot
install.packages("ggrepel")
library(ggrepel)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_written_by_budé_at_and_sent_by_budé_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create scatterplot
plot <- ggplot(data=data, aes(x=NoLettersWrittenByBudéTO, y=NoLettersWrittenBYBudéAT, label=LocationName)) +
geom_point(stat = "identity") +
geom_smooth(method = lm) +
labs(x="Number of letters written by Budé to this location",y="Number of letters written by Budé at this location") +
theme_bw()
plot
library(ggplot2)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_written_by_budé_at_and_sent_by_budé_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create scatterplot
plot <- ggplot(data=data, aes(x=NoLettersWrittenByBudéTO, y=NoLettersWrittenBYBudéAT, label=LocationName)) +
geom_point(stat = "identity") +
geom_smooth(method = lm) +
labs(x="Number of letters written by Budé to this location",y="Number of letters written by Budé at this location") +
theme_bw()
plot
library(ggrepel)
require(readr)
require(ggplot2)
library(readr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/comp_epp_per_loc_written_by_budé_at_and_sent_by_budé_to.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# create scatterplot
plot <- ggplot(data=data, aes(x=NoLettersWrittenByBudéTO, y=NoLettersWrittenBYBudéAT, label=LocationName)) +
geom_point(stat = "identity") +
geom_smooth(method = lm) +
labs(x="Number of letters written by Budé to this location",y="Number of letters written by Budé at this location") +
theme_bw()
plot
require(readr)
require(plyr)
require(ggplot2)
library(readr)
library(plyr)
library(ggplot2)
# set working directory
getwd()
setwd("../query_results/")
# read data
data<-read.csv("no_epp_per_loc/no_epp_per_loc_sent_by_budé_to_outliers.csv", fileEncoding="UTF-8", na.strings=c("NULL"))
# callculate median for label
data_meds <- ddply(data, .(locations_name_modern), summarise, med = median(COUNT))
# create boxplot with facet grid
plot <- ggplot(data, aes(x = locations_name_modern, y = COUNT)) +
geom_boxplot(notch = FALSE) +
geom_text(data = data_meds, aes(x = locations_name_modern, y = med, label = med), size = 3, vjust = -0.5) +
labs(x="Outlier Location", y ="Number of letters sent from Budé to this location per year") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.35))
plot
install.packages("ggplots2")
